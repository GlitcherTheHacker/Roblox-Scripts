-- Adaptive Burst Aura (network-aware, private-server friendly)
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Stats = game:GetService("Stats")
local LocalPlayer = Players.LocalPlayer

-- CONFIG
local auraRange = 20
local attackRate = 0.05         -- how often we check for targets (seconds)
local desiredTotalHits = 500    -- logical hits per detection
local maxBatchPerWave = 25      -- how many events to send in one micro-wave
local minWaveInterval = 0.01    -- minimum gap between waves (s)
local maxWaveInterval = 0.1     -- maximum gap between waves (s)
local jitter = 0.003            -- random jitter to avoid exact periodicity

-- helper to read ping (falls back to a small default)
local function getPingSeconds()
    local network = Stats.Network
    local pingStat = network and network.ServerStatsItem and network.ServerStatsItem["Data Ping"]
    if pingStat then
        local ms = pingStat:GetValue()
        if ms and ms > 0 then
            return ms / 1000
        end
    end
    return 0.03
end

local function sendBurst(fightEvent, target, totalHits)
    -- Adaptive parameters
    local ping = getPingSeconds()
    -- scale waves by ping: higher ping -> fewer hits per wave and longer intervals
    local scale = math.clamp(ping / 0.03, 0.5, 5) -- 1 at ~30ms
    local batch = math.max(1, math.floor(maxBatchPerWave / scale))
    local interval = math.clamp(minWaveInterval * scale, minWaveInterval, maxWaveInterval)

    -- spawn a thread to send the waves without blocking main loop
    task.spawn(function()
        local sent = 0
        while sent < totalHits do
            local toSend = math.min(batch, totalHits - sent)
            for i = 1, toSend do
                -- Fire the remote with the single target (server must validate)
                pcall(function()
                    fightEvent:FireServer(target)
                end)
            end
            sent = sent + toSend

            -- small wait with jitter
            local waitTime = interval + (math.random() - 0.5) * jitter
            task.wait(waitTime)
        end
    end)
end

-- Example usage: detect targets and call sendBurst
task.spawn(function()
    while true do
        local myChar = LocalPlayer.Character
        local myHRP = myChar and myChar:FindFirstChild("HumanoidRootPart")
        if myHRP then
            for _, plr in ipairs(Players:GetPlayers()) do
                if plr ~= LocalPlayer then
                    local char = plr.Character
                    local hrp = char and char:FindFirstChild("HumanoidRootPart")
                    if hrp and (hrp.Position - myHRP.Position).Magnitude <= auraRange then
                        -- find tool / event on local player
                        local tool = myChar:FindFirstChildOfClass("Tool")
                        local fightEvent = tool and tool:FindFirstChild("FightEvent")
                        if fightEvent then
                            -- send an adaptive 500-hit burst
                            sendBurst(fightEvent, hrp, desiredTotalHits)
                        end
                    end
                end
            end
        end
        task.wait(attackRate)
    end
end)
