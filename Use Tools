-- ⚡ USE TOOLS SELECTOR GUI (Final Version) ⚡
-- Live tool manager with draggable GUI, individual + global spam

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer

-- === GUI SETUP ===
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "UseToolsSelector"
screenGui.ResetOnSpawn = false
screenGui.Parent = game.CoreGui

local mainFrame = Instance.new("Frame")
mainFrame.Size = UDim2.new(0, 200, 0, 300)
mainFrame.Position = UDim2.new(0, 20, 0.4, -150)
mainFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
mainFrame.BorderSizePixel = 0
mainFrame.Parent = screenGui
Instance.new("UICorner", mainFrame).CornerRadius = UDim.new(0, 10)

-- draggable header
local header = Instance.new("TextLabel")
header.Size = UDim2.new(1, 0, 0, 30)
header.BackgroundColor3 = Color3.fromRGB(40, 0, 60)
header.TextColor3 = Color3.fromRGB(255, 255, 255)
header.Text = "⚡ Use Tools ⚡"
header.Font = Enum.Font.GothamBold
header.TextSize = 16
header.Parent = mainFrame
Instance.new("UICorner", header).CornerRadius = UDim.new(0, 10)

-- drag logic (pc + mobile)
do
    local dragging, dragStart, startPos
    local function update(input)
        local delta = input.Position - dragStart
        mainFrame.Position = UDim2.new(
            startPos.X.Scale, startPos.X.Offset + delta.X,
            startPos.Y.Scale, startPos.Y.Offset + delta.Y
        )
    end
    header.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1
        or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = mainFrame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    header.InputChanged:Connect(function(input)
        if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement
        or input.UserInputType == Enum.UserInputType.Touch) then
            update(input)
        end
    end)
end

local scrollingFrame = Instance.new("ScrollingFrame")
scrollingFrame.Size = UDim2.new(1, -10, 1, -70)
scrollingFrame.Position = UDim2.new(0, 5, 0, 35)
scrollingFrame.BackgroundTransparency = 1
scrollingFrame.BorderSizePixel = 0
scrollingFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
scrollingFrame.ScrollBarThickness = 6
scrollingFrame.Parent = mainFrame

local layout = Instance.new("UIListLayout")
layout.Parent = scrollingFrame
layout.Padding = UDim.new(0, 5)

layout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
    scrollingFrame.CanvasSize = UDim2.new(0, 0, 0, layout.AbsoluteContentSize.Y + 10)
end)

-- === TOOL MANAGER ===
local toolButtons = {}
local activeTools = {}
local globalSpam = false

-- global toggle
local globalBtn = Instance.new("TextButton")
globalBtn.Size = UDim2.new(0.9, 0, 0, 30)
globalBtn.Position = UDim2.new(0.05, 0, 1, -35)
globalBtn.BackgroundColor3 = Color3.fromRGB(100, 0, 0)
globalBtn.Text = "GLOBAL [OFF]"
globalBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
globalBtn.Font = Enum.Font.GothamBold
globalBtn.TextSize = 14
globalBtn.Parent = mainFrame
Instance.new("UICorner", globalBtn).CornerRadius = UDim.new(0, 6)

globalBtn.MouseButton1Click:Connect(function()
    globalSpam = not globalSpam
    globalBtn.Text = globalSpam and "GLOBAL [ON]" or "GLOBAL [OFF]"
    globalBtn.BackgroundColor3 = globalSpam and Color3.fromRGB(0, 120, 0) or Color3.fromRGB(100, 0, 0)
end)

-- spam loop
RunService.Heartbeat:Connect(function()
    local char = LocalPlayer.Character
    if not char then return end

    -- global spam overrides everything
    if globalSpam then
        for _, tool in ipairs(LocalPlayer.Backpack:GetChildren()) do
            if tool:IsA("Tool") then tool.Parent = char end
        end
        for _, tool in ipairs(char:GetChildren()) do
            if tool:IsA("Tool") then pcall(function() tool:Activate() end) end
        end
        return
    end

    -- per-tool spam
    for tool, enabled in pairs(activeTools) do
        if enabled then
            if tool.Parent ~= char then tool.Parent = char end
            pcall(function() tool:Activate() end)
        end
    end
end)

-- per-tool button creation
local function createToolButton(tool)
    if toolButtons[tool] then return end
    local button = Instance.new("TextButton")
    button.Size = UDim2.new(1, -10, 0, 30)
    button.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.Text = tool.Name .. " [OFF]"
    button.Font = Enum.Font.Gotham
    button.TextSize = 14
    button.Parent = scrollingFrame
    Instance.new("UICorner", button).CornerRadius = UDim.new(0, 6)

    button.MouseButton1Click:Connect(function()
        activeTools[tool] = not activeTools[tool]
        if activeTools[tool] then
            button.Text = tool.Name .. " [ON]"
            button.BackgroundColor3 = Color3.fromRGB(60, 0, 90)
        else
            button.Text = tool.Name .. " [OFF]"
            button.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
        end
    end)

    tool.AncestryChanged:Connect(function(_, parent)
        if not parent then
            activeTools[tool] = nil
            toolButtons[tool] = nil
            button:Destroy()
        end
    end)

    toolButtons[tool] = button
end

-- refresh tools
local function refreshTools()
    for _, tool in ipairs(LocalPlayer.Backpack:GetChildren()) do
        if tool:IsA("Tool") then createToolButton(tool) end
    end
    if LocalPlayer.Character then
        for _, tool in ipairs(LocalPlayer.Character:GetChildren()) do
            if tool:IsA("Tool") then createToolButton(tool) end
        end
    end
end

LocalPlayer.Backpack.ChildAdded:Connect(function(tool)
    if tool:IsA("Tool") then createToolButton(tool) end
end)
LocalPlayer.CharacterAdded:Connect(function(char)
    char.ChildAdded:Connect(function(tool)
        if tool:IsA("Tool") then createToolButton(tool) end
    end)
    task.wait(1)
    refreshTools()
end)

refreshTools()

print("⚡ USE TOOLS SELECTOR GUI (Final) loaded ⚡")
